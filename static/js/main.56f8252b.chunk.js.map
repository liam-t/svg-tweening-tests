{"version":3,"sources":["components/Btn.jsx","components/Container.jsx","App.js","serviceWorker.js","webpack:///./src/index.js?b635"],"names":["pausedPath","join","transition","from","to","parsedValFromTo","fromTo","pathToArray","splitPathString","length","parsedFrom","parsedTo","args","maxSegmentLength","single","interpolator","combine","separate","tween","duration","pipe","Btn","React","useState","isActive","setIsActive","isAnimating","setIsAnimating","activePose","activeColor","BtnOuter","type","disabled","Svg","onClick","Icon","pose","fill","onPoseComplete","defaultProps","styled","button","css","keyframes","svg","PosedIcon","posed","path","playing","d","stopped","paused","Container","children","ContainerOuter","div","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"w8BAYA,IAUMA,EAJqB,CACzB,oJACA,oJAEoCC,KAAK,KAErCC,EAAa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,GACpBC,EAAkB,SAACC,GACD,kBAAXA,GAAqBA,EAAOL,KAAK,KAC5C,IAAMM,EAAcC,0BAAgBF,GACpC,OAAIC,EAAYE,OAAS,EAAUF,EAC5BD,GAEHI,EAAaL,EAAgBF,GAC7BQ,EAAWN,EAAgBD,GAK3BQ,EAAO,CAACF,EAAYC,EAJA,CACxBE,iBAAkB,EAClBC,QAAQ,IAGJC,EAAmC,kBAAbJ,EACxBK,UAAO,WAAP,EAAWJ,GACXK,WAAQ,WAAR,EAAYL,GAEhB,OAAOM,YAAM,CACXf,KAAM,EACNC,GAAI,EACJe,SA/BuB,MAgCtBC,KAAKL,IAIJM,EAAM,WAAO,IAAD,EACgBC,IAAMC,UAAS,GAD/B,mBACTC,EADS,KACCC,EADD,OAEsBH,IAAMC,UAAS,GAFrC,mBAETG,EAFS,KAEIC,EAFJ,KAGVC,EAAaJ,EAAW,SAAW,UACnCK,EAAcL,EAAW,UAAY,UAQ3C,OACE,kBAACM,EAAD,CACEC,KAAK,SACLC,SAAUN,EACVA,YAAaA,GAEb,kBAACO,EAAD,CAAKC,QAbW,WACdR,IACJC,GAAe,GACfF,GAAaD,MAWT,kBAACW,EAAD,CACEC,KAAMR,EACNS,KAAMR,EACNS,eAZe,kBAAMX,GAAe,SAmB9CN,EAAIkB,aAnEiB,GAoENlB,QAGTS,EAAWU,IAAOC,OAAV,KASV,qBAAGf,aAAiCgB,YAAJ,IACnBC,YADmB,KA9ET,QAsFrBV,EAAMO,IAAOI,IAAV,KAKHC,EAAYC,IAAMC,KAAK,CAC3BC,QAAS,CACP9C,aACA+C,EA5Fa,kHA8FfC,QAAS,CACPhD,aACA+C,EA/Fa,2HAiGfE,OAAQ,CACNjD,aACA+C,EAAGjD,KAGDmC,EAAOK,YAAOK,EAAPL,CAAH,K,mTC7GV,IAEMY,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,kBAACC,EAAD,KAAiBD,IAErDD,EAAUb,aAJW,GAMNa,QAETE,EAAiBd,IAAOe,IAAV,KCJLC,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,SCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.56f8252b.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport posed from 'react-pose';\nimport { tween } from 'popmotion';\nimport {\n  separate,\n  combine,\n  splitPathString,\n} from 'flubber';\n// import PT from 'proptypes';\n\nconst propTypes = {};\nconst defaultProps = {};\n\nconst transitionDuration = 500;\n\nconst playPath = 'M84.2,43.6L24.4,3.8c-5.1-3.4-12,0.3-12,6.4v79.5c0,6.2,6.9,9.8,12,6.4l59.8-39.8C88.7,53.4,88.7,46.6,84.2,43.6 z';\nconst stopPath = 'M89.8,2.5H10.2C6,2.5,2.5,6,2.5,10.2v79.6c0,4.3,3.5,7.7,7.7,7.7h79.6c4.3,0,7.7-3.5,7.7-7.7V10.2C97.5,6,94,2.5,89.8,2.5 z';\nconst pausedPathElements = [\n  'M 86.7,2.5 H 64.4 c -2.1,0 -3.9,1.7 -3.9,3.9 v 87.3 c 0,2.1 1.7,3.9 3.9,3.9 h 22.2 c 2.1,0 3.9,-1.7 3.9,-3.9 V 6.4 c 0,-2.2 -1.7,-3.9 -3.8,-3.9 z',\n  'm -51.1,0 H 13.3 c -2.1,0 -3.9,1.7 -3.9,3.9 v 87.3 c 0,2.1 1.7,3.9 3.9,3.9 h 22.2 c 2.1,0 3.9,-1.7 3.9,-3.9 V 6.4 c 0,-2.2 -1.7,-3.9 -3.8,-3.9 z',\n];\nconst pausedPath = pausedPathElements.join(' ');\n\nconst transition = ({ from, to }) => {\n  const parsedValFromTo = (fromTo) => {\n    if (typeof fromTo !== 'string') fromTo.join(' ');\n    const pathToArray = splitPathString(fromTo);\n    if (pathToArray.length > 1) return pathToArray;\n    return fromTo;\n  };\n  const parsedFrom = parsedValFromTo(from);\n  const parsedTo = parsedValFromTo(to);\n  const transitionOptions = {\n    maxSegmentLength: 2,\n    single: true,\n  };\n  const args = [parsedFrom, parsedTo, transitionOptions];\n  const interpolator = typeof parsedTo === 'string'\n    ? combine(...args)\n    : separate(...args);\n\n  return tween({\n    from: 0,\n    to: 1,\n    duration: transitionDuration,\n  }).pipe(interpolator);\n};\n\n\nconst Btn = () => {\n  const [isActive, setIsActive] = React.useState(false);\n  const [isAnimating, setIsAnimating] = React.useState(false);\n  const activePose = isActive ? 'paused' : 'playing';\n  const activeColor = isActive ? '#327772' : '#242c56';\n  const clickHandle = () => {\n    if (isAnimating) return;\n    setIsAnimating(true);\n    setIsActive(!isActive);\n  };\n  const completeHandle = () => setIsAnimating(false);\n\n  return (\n    <BtnOuter\n      type=\"button\"\n      disabled={isAnimating}\n      isAnimating={isAnimating}\n    >\n      <Svg onClick={clickHandle}>\n        <Icon\n          pose={activePose}\n          fill={activeColor}\n          onPoseComplete={completeHandle}\n        />\n      </Svg>\n    </BtnOuter>\n  );\n};\nBtn.propTypes = propTypes;\nBtn.defaultProps = defaultProps;\nexport default Btn;\n\n\nconst BtnOuter = styled.button`\n  padding: 0;\n  background-color: transparent;\n  outline: none;\n  border: none;\n  cursor: pointer;\n  &[disabled] {\n    cursor: default;\n  }\n  ${({ isAnimating }) => isAnimating && css`\n    animation: ${keyframes`\n      0% { transform: scale(1) }\n      50% { transform: scale(0.75) }\n      100% { transform: scale(1) }\n    `} ${transitionDuration}ms;\n  `}\n`;\nconst Svg = styled.svg`\n  width: 100px;\n  height: 100px;\n`;\n\nconst PosedIcon = posed.path({\n  playing: {\n    transition,\n    d: playPath,\n  },\n  stopped: {\n    transition,\n    d: stopPath,\n  },\n  paused: {\n    transition,\n    d: pausedPath,\n  },\n});\nconst Icon = styled(PosedIcon)`\n  transition: fill 0.3s;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PT from 'proptypes';\n\nconst propTypes = {\n  children: PT.oneOfType([\n    PT.node,\n    PT.arrayOf(PT.node),\n  ]).isRequired,\n};\nconst defaultProps = {};\n\nconst Container = ({ children }) => <ContainerOuter>{children}</ContainerOuter>;\nContainer.propTypes = propTypes;\nContainer.defaultProps = defaultProps;\n\nexport default Container;\n\nconst ContainerOuter = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  background-color: #f3d052;\n  /* background-image: radial-gradient(transparent, rgba(255, 129, 0, 0.4)); */\n`;\n","import React from 'react';\nimport Btn from './components/Btn';\nimport Container from './components/Container';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <Btn />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}